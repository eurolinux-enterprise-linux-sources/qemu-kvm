From c8d228255a06d2b0609b28c56bd4d3b4cdd9c3c1 Mon Sep 17 00:00:00 2001
Message-Id: <c8d228255a06d2b0609b28c56bd4d3b4cdd9c3c1.1467309786.git.jen@redhat.com>
In-Reply-To: <b75cb6f28f374e6cee8f45cb30d017d2cf77dcf6.1467309786.git.jen@redhat.com>
References: <b75cb6f28f374e6cee8f45cb30d017d2cf77dcf6.1467309786.git.jen@redhat.com>
From: Gerd Hoffmann <kraxel@redhat.com>
Date: Tue, 14 Jun 2016 08:53:46 -0500
Subject: [CHANGE 09/10] vga: make sure vga register setup for vbe stays
 intact.
To: rhvirt-patches@redhat.com,
    jen@redhat.com

RH-Author: Gerd Hoffmann <kraxel@redhat.com>
Message-id: <1465894427-26109-10-git-send-email-kraxel@redhat.com>
Patchwork-id: 70596
O-Subject: [RHEL-6.9 qemu-kvm PATCH v3 09/10] vga: make sure vga register setup for vbe stays intact.
Bugzilla: 1331408
RH-Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
RH-Acked-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
RH-Acked-by: Laszlo Ersek <lersek@redhat.com>

Call vbe_update_vgaregs() when the guest touches GFX, SEQ or CRT
registers, to make sure the vga registers will always have the
values needed by vbe mode.  This makes sure the sanity checks
applied by vbe_fixup_regs() are effective.

Without this guests can muck with shift_control, can turn on planar
vga modes or text mode emulation while VBE is active, making qemu
take code paths meant for CGA compatibility, but with the very
large display widths and heigts settable using VBE registers.

Which is good for one or another buffer overflow.  Not that
critical as they typically read overflows happening somewhere
in the display code.  So guests can DoS by crashing qemu with a
segfault, but it is probably not possible to break out of the VM.

Reported-by: Zuozhi Fzz <zuozhi.fzz@alibaba-inc.com>
Reported-by: P J P <ppandit@redhat.com>
Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
(Upstream commit ID: fd3c136b3e1482cd0ec7285d6bc2a3e6a62c38d7)

Conflicts:
	hw/vga.c

[ RHEL-6 note: minor context conflicts, missing 8076388 too ]
---
 hw/vga.c | 5 +++++
 1 file changed, 5 insertions(+)

Signed-off-by: Jeff E. Nelson <jen@redhat.com>
---
 hw/vga.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/hw/vga.c b/hw/vga.c
index 7e812a4..5fccab1 100644
--- a/hw/vga.c
+++ b/hw/vga.c
@@ -151,6 +151,7 @@ static uint16_t expand2[256];
 static uint8_t expand4to8[16];
 
 static void vga_screen_dump(void *opaque, const char *filename);
+static void vbe_update_vgaregs(VGACommonState *s);
 
 static inline bool vbe_enabled(VGACommonState *s)
 {
@@ -448,6 +449,7 @@ void vga_ioport_write(void *opaque, uint32_t addr, uint32_t val)
         printf("vga: write SR%x = 0x%02x\n", s->sr_index, val);
 #endif
         s->sr[s->sr_index] = val & sr_mask[s->sr_index];
+        vbe_update_vgaregs(s);
         if (s->sr_index == VGA_SEQ_CLOCK_MODE) {
             s->update_retrace_info(s);
         }
@@ -478,6 +480,7 @@ void vga_ioport_write(void *opaque, uint32_t addr, uint32_t val)
         printf("vga: write GR%x = 0x%02x\n", s->gr_index, val);
 #endif
         s->gr[s->gr_index] = val & gr_mask[s->gr_index];
+        vbe_update_vgaregs(s);
         break;
     case VGA_CRT_IM:
     case VGA_CRT_IC:
@@ -495,10 +498,12 @@ void vga_ioport_write(void *opaque, uint32_t addr, uint32_t val)
             if (s->cr_index == VGA_CRTC_OVERFLOW) {
                 s->cr[VGA_CRTC_OVERFLOW] = (s->cr[VGA_CRTC_OVERFLOW] & ~0x10) |
                     (val & 0x10);
+                vbe_update_vgaregs(s);
             }
             return;
         }
         s->cr[s->cr_index] = val;
+        vbe_update_vgaregs(s);
 
         switch(s->cr_index) {
         case VGA_CRTC_H_TOTAL:
-- 
2.5.5

