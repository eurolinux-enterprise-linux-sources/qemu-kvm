From 784ac62a1d0044a719947ed374bf041ec856083d Mon Sep 17 00:00:00 2001
From: Eduardo Habkost <ehabkost@redhat.com>
Date: Thu, 1 Feb 2018 02:30:47 -0200
Subject: [PATCH 1/6] target-i386: add support for SPEC_CTRL MSR

RH-Author: Eduardo Habkost <ehabkost@redhat.com>
Message-id: <20180201023049.14738-2-ehabkost@redhat.com>
Patchwork-id: 78835
O-Subject: [RHEL-6.10 qemu-kvm PATCH 1/3] target-i386: add support for SPEC_CTRL MSR
Bugzilla: 1525939 1528024
RH-Acked-by: Paolo Bonzini <pbonzini@redhat.com>
RH-Acked-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
RH-Acked-by: Laszlo Ersek <lersek@redhat.com>

From: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
---
 qemu-kvm-x86.c        | 11 +++++++++++
 target-i386/cpu.h     |  2 ++
 target-i386/machine.c | 20 ++++++++++++++++++++
 3 files changed, 33 insertions(+)

diff --git a/qemu-kvm-x86.c b/qemu-kvm-x86.c
index fbb4b7deb9..e01717403f 100644
--- a/qemu-kvm-x86.c
+++ b/qemu-kvm-x86.c
@@ -42,6 +42,8 @@ static bool has_msr_kvm_steal_time;
 static bool has_msr_architectural_pmu;
 static uint32_t num_architectural_pmu_counters;
 
+static bool has_msr_spec_ctrl;
+
 int kvm_set_tss_addr(kvm_context_t kvm, unsigned long addr)
 {
 #ifdef KVM_CAP_SET_TSS_ADDR
@@ -833,6 +835,8 @@ int kvm_arch_qemu_create_context(void)
             has_msr_tsc_aux = true;
         if (kvm_msr_list->indices[i] == MSR_IA32_TSCDEADLINE)
             has_msr_tsc_deadline = 1;
+        if (kvm_msr_list->indices[i] == MSR_IA32_SPEC_CTRL)
+            has_msr_spec_ctrl = true;
     }
 
     return 0;
@@ -935,6 +939,9 @@ static int get_msr_entry(struct kvm_msr_entry *entry, CPUState *env)
             env->mcg_ctl = entry->data;
             break;
 #endif
+        case MSR_IA32_SPEC_CTRL:
+            env->spec_ctrl = entry->data;
+            break;
         default:
 #ifdef KVM_CAP_MCE
             if (entry->index >= MSR_MC0_CTL &&
@@ -1137,6 +1144,8 @@ void kvm_arch_load_regs(CPUState *env)
         set_msr_entry(&msrs[n++], MSR_TSC_AUX, env->tsc_aux);
     if (has_msr_tsc_deadline)
         set_msr_entry(&msrs[n++], MSR_IA32_TSCDEADLINE, env->tsc_deadline);
+    if (has_msr_spec_ctrl)
+        set_msr_entry(&msrs[n++], MSR_IA32_SPEC_CTRL, env->spec_ctrl);
 #ifdef TARGET_X86_64
     if (lm_capable_kernel) {
         set_msr_entry(&msrs[n++], MSR_CSTAR,             env->cstar);
@@ -1412,6 +1421,8 @@ void kvm_arch_save_regs(CPUState *env)
         msrs[n++].index = MSR_TSC_AUX;
     if (has_msr_tsc_deadline)
         msrs[n++].index = MSR_IA32_TSCDEADLINE;
+    if (has_msr_spec_ctrl)
+        msrs[n++].index = MSR_IA32_SPEC_CTRL;
 #ifdef TARGET_X86_64
     if (lm_capable_kernel) {
         msrs[n++].index = MSR_CSTAR;
diff --git a/target-i386/cpu.h b/target-i386/cpu.h
index e01acd121e..dc60dd146a 100644
--- a/target-i386/cpu.h
+++ b/target-i386/cpu.h
@@ -286,6 +286,7 @@
 #define MSR_IA32_APICBASE_BSP           (1<<8)
 #define MSR_IA32_APICBASE_ENABLE        (1<<11)
 #define MSR_IA32_APICBASE_BASE          (0xfffff<<12)
+#define MSR_IA32_SPEC_CTRL              0x48
 #define MSR_IA32_TSCDEADLINE            0x6e0
 
 #define MSR_P6_PERFCTR0                 0xc1
@@ -771,6 +772,7 @@ typedef struct CPUX86State {
         CPUWatchpoint *cpu_watchpoint[4];
     }; /* break/watchpoints for dr[0..3] */
     uint32_t smbase;
+    uint64_t spec_ctrl;
     int old_exception;  /* exception in flight */
 
     CPU_COMMON
diff --git a/target-i386/machine.c b/target-i386/machine.c
index 54218efc69..8fd0ea0dcc 100644
--- a/target-i386/machine.c
+++ b/target-i386/machine.c
@@ -570,6 +570,23 @@ static const VMStateDescription vmstate_msr_architectural_pmu = {
     }
 };
 
+static bool spec_ctrl_needed(void *opaque)
+{
+    CPUState *env = opaque;
+
+    return env->spec_ctrl != 0;
+}
+
+static const VMStateDescription vmstate_spec_ctrl = {
+    .name = "cpu/spec_ctrl",
+    .version_id = 1,
+    .minimum_version_id = 1,
+    .fields = (VMStateField[]){
+        VMSTATE_UINT64(spec_ctrl, CPUState),
+        VMSTATE_END_OF_LIST()
+    }
+};
+
 static const VMStateDescription vmstate_cpu = {
     .name = "cpu",
     .version_id = CPU_SAVE_VERSION,
@@ -694,6 +711,9 @@ static const VMStateDescription vmstate_cpu = {
         }, {
             .vmsd = &vmstate_msr_architectural_pmu,
             .needed = pmu_enable_needed,
+        }, {
+            .vmsd = &vmstate_spec_ctrl,
+            .needed = spec_ctrl_needed,
         } , {
 	    /* empty */
 	}
-- 
2.13.6

